#!/usr/bin/env bash
#is a challenge

import random

def pollard_rho(n):
  # Find a non-trivial factor of n
  x = random.randint(1, n - 1)
  y = x
  c = random.randint(1, n - 1)
  d = 1

  while d == 1:
    x = (x * x + c) % n
    y = (y * y + c) % n
    y = (y * y + c) % n
    d = gcd(abs(x - y), n)

  if d == n:
    # Failed to find a factor, try again with a different c
    return pollard_rho(n)
  else:
    return d

def factorize(n):
  # Check if n is a small prime
  if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:
    return (n, 1)

  p = pollard_rho(n)
  q = n // p
  return (p, q)

def gcd(a, b):
  # Euclidean algorithm for finding the greatest common divisor
  while b != 0:
    a, b = b, a % b
  return a

def main():
  # Read the number from the command line
  n = int(sys.argv[1])

  # Factorize the number
  p, q = factorize(n)

  # Print the factors
  print(f'{n}={p}*{q}')

if __name__ == '__main__':
  main()
